
-- 1. **Find the total revenue generated by each category in the Sakila database.**
WITH CategoryRevenue AS (
        SELECT c.category_id, c.name AS category_name, 
               SUM(p.amount) AS total_revenue
        FROM payment p
        JOIN rental r ON p.rental_id = r.rental_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_category fc ON i.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
        GROUP BY c.category_id, c.name
    )
    SELECT category_name, total_revenue
    FROM CategoryRevenue
    ORDER BY total_revenue DESC;

-- 2. **Top 5 customers based on total rental amount:**
 WITH CustomerRentals AS (
        SELECT c.customer_id, CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
               SUM(p.amount) AS total_amount
        FROM payment p
        JOIN customer c ON p.customer_id = c.customer_id
        GROUP BY c.customer_id, customer_name
    )
    SELECT customer_name, total_amount
    FROM CustomerRentals
    ORDER BY total_amount DESC
    LIMIT 5;

-- 3. **Monthly rental count for each film category, organized by year:**
 WITH MonthlyRentals AS (
        SELECT DATE_FORMAT(r.rental_date, '%Y-%m') AS rental_month,
               fc.category_id, c.name AS category_name,
               COUNT(r.rental_id) AS rental_count
        FROM rental r
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_category fc ON i.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
        GROUP BY rental_month, fc.category_id, category_name
    )
    SELECT rental_month, category_name, rental_count
    FROM MonthlyRentals
    ORDER BY rental_month, category_id;

-- 4. **Average rental duration for each customer:**
 WITH AvgRentalDuration AS (
        SELECT r.customer_id, AVG(DATEDIFF(r.return_date, r.rental_date)) AS avg_duration
        FROM rental r
        GROUP BY r.customer_id
    )
    SELECT c.first_name, c.last_name, ard.avg_duration
    FROM customer c
    JOIN AvgRentalDuration ard ON c.customer_id = ard.customer_id;

-- 5. **Films rented more than the average number of times:**
WITH AvgFilmRental AS (
        SELECT f.film_id, COUNT(r.rental_id) AS rental_count
        FROM film f
        LEFT JOIN inventory i ON f.film_id = i.film_id
        LEFT JOIN rental r ON i.inventory_id = r.inventory_id
        GROUP BY f.film_id
    ), AverageRentals AS (
        SELECT AVG(rental_count) AS avg_rentals
        FROM AvgFilmRental
    )
    SELECT f.title, afr.rental_count
    FROM film f
    JOIN AvgFilmRental afr ON f.film_id = afr.film_id
    CROSS JOIN AverageRentals ar
    WHERE afr.rental_count > ar.avg_rentals;

-- 6. **Top 10 films generating the most revenue with category and rental count:**
WITH FilmRevenue AS (
        SELECT f.film_id, f.title, c.name AS category, COUNT(r.rental_id) AS rental_count,
               SUM(p.amount) AS total_revenue
        FROM film f
        JOIN film_category fc ON f.film_id = fc.film_id
        JOIN category c ON fc.category_id = c.category_id
        LEFT JOIN inventory i ON f.film_id = i.film_id
        LEFT JOIN rental r ON i.inventory_id = r.inventory_id
        LEFT JOIN payment p ON r.rental_id = p.rental_id
        GROUP BY f.film_id, f.title, c.name
    )
    SELECT title, category, rental_count, total_revenue
    FROM FilmRevenue
    ORDER BY total_revenue DESC
    LIMIT 10;

-- 7. **Customers who rented the same film more than once in a month:**
 WITH CustomerRentalCounts AS (
    SELECT customer_id, film_id, DATE_FORMAT(rental_date, '%Y-%m') AS rental_month,
           COUNT(rental_id) AS rentals_in_month
    FROM rental
    GROUP BY customer_id, film_id, rental_month
)
SELECT CONCAT(c.first_name, ' ', c.last_name) AS customer_name, f.title, crc.rental_month, crc.film_id
FROM customer c
JOIN CustomerRentalCounts crc ON c.customer_id = crc.customer_id
JOIN film f ON crc.film_id = f.film_id
WHERE crc.rentals_in_month > 1;

-- 8. **Films that have not been rented yet:**
 WITH RentedFilms AS (
        SELECT DISTINCT inventory.film_id
        FROM rental
        JOIN inventory ON rental.inventory_id = inventory.inventory_id
    )
    SELECT film_id, title
    FROM film
    WHERE film_id NOT IN (SELECT film_id FROM RentedFilms);

-- 9. **Customers who rented at least one film from each category:**
WITH CustomerCategoryCounts AS (
        SELECT c.customer_id, fc.category_id, COUNT(DISTINCT f.film_id) AS films_in_category
        FROM customer c
        JOIN rental r ON c.customer_id = r.customer_id
        JOIN inventory i ON r.inventory_id = i.inventory_id
        JOIN film_category fc ON i.film_id = fc.film_id
        JOIN film f ON fc.film_id = f.film_id
        GROUP BY c.customer_id, fc.category_id
    ), CategoryCount AS (
        SELECT category_id, COUNT(*) AS total_categories
        FROM category
        GROUP BY category_id
    )
    SELECT customer_id, COUNT(*) AS matched_categories
    FROM CustomerCategoryCounts
    GROUP BY customer_id
    HAVING COUNT(*) = (SELECT COUNT(*) FROM CategoryCount);

-- 10. **Breakdown of rentals made by each customer in their first month:**
 WITH FirstMonthRentals AS (
        SELECT customer_id, DATE_FORMAT(rental_date, '%Y-%m') AS rental_month, COUNT(rental_id) AS rentals
        FROM rental
        GROUP BY customer_id, rental_month
    )
    SELECT customer_id, rental_month, rentals
    FROM FirstMonthRentals
    WHERE rental_month = (
        SELECT MIN(DATE_FORMAT(rental_date, '%Y-%m')) FROM rental
        GROUP BY customer_id
    );




